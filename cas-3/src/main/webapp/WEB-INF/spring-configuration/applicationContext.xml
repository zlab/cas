<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context-4.0.xsd
                http://www.springframework.org/schema/aop
                http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <aop:aspectj-autoproxy />

    <!-- Message source for this context, loaded from localized "messages_xx" files -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
        p:basename="messages" />

    <bean id="servicesManager" class="org.jasig.cas.services.DefaultServicesManagerImpl">
        <constructor-arg index="0" ref="serviceRegistryDao" />
    </bean>

    <!-- Job to periodically reload services from service registry. -->
    <bean id="serviceRegistryReloaderJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
        p:targetObject-ref="servicesManager" p:targetMethod="reload" />

    <bean id="periodicServiceRegistryReloaderTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean"
        p:jobDetail-ref="serviceRegistryReloaderJobDetail" p:startDelay="${service.registry.quartz.reloader.startDelay:120000}"
        p:repeatInterval="${service.registry.quartz.reloader.repeatInterval:120000}" />

    <bean id="httpClient" class="org.jasig.cas.util.HttpClient" p:readTimeout="5000"
        p:connectionTimeout="5000" />

    <bean id="noRedirectHttpClient" class="org.jasig.cas.util.HttpClient" parent="httpClient"
        p:followRedirects="false" />

    <!-- anonymousAccess principal-id -->
    <bean id="persistentIdGenerator" class="org.jasig.cas.authentication.principal.ShibbolethCompatiblePersistentIdGenerator"
        p:salt="casrocks" />

    <!-- CentralAuthenticationService -->
    <bean id="centralAuthenticationService" class="org.jasig.cas.CentralAuthenticationServiceImpl"
        p:ticketGrantingTicketExpirationPolicy-ref="grantingTicketExpirationPolicy"
        p:serviceTicketExpirationPolicy-ref="serviceTicketExpirationPolicy"
        p:authenticationManager-ref="authenticationManager"
        p:ticketGrantingTicketUniqueTicketIdGenerator-ref="ticketGrantingTicketUniqueIdGenerator"
        p:ticketRegistry-ref="ticketRegistry" p:servicesManager-ref="servicesManager"
        p:persistentIdGenerator-ref="persistentIdGenerator"
        p:uniqueTicketIdGeneratorsForService-ref="uniqueIdGeneratorsMap" />

    <bean id="proxy20Handler" class="org.jasig.cas.ticket.proxy.support.Cas20ProxyHandler"
        p:httpClient-ref="httpClient" p:uniqueTicketIdGenerator-ref="proxy20TicketUniqueIdGenerator" />

    <!-- ADVISORS -->
    <bean id="advisorAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

    <bean id="validationAnnotationBeanPostProcessor" class="org.jasig.cas.util.CustomBeanValidationPostProcessor"
        p:afterInitialization="true" />

    <!-- The scheduler bean wires up any triggers that define scheduled tasks -->
    <bean id="scheduler" class="org.jasig.cas.util.AutowiringSchedulerFactoryBean" />

    <!-- 开放平台帐号登录 -->
    
    <bean id="github" class="org.scribe.up.provider.impl.GitHubProvider">
        <property name="key" value="83fe612751e7ada99b02" />
        <property name="secret" value="7fc999e9cfc7db60e926df7569fb81a0c500efac" />
    </bean>

    <bean id="sinaweibo" class="net.zhanqi.app.cas.open.provider.SinaWeiboProvider">
        <property name="key" value="3092106763" />
        <property name="secret" value="1ed045217263e41732d52917623e4ce6" />
    </bean>

    <bean id="qzone" class="net.zhanqi.app.cas.open.provider.QzoneProvider">
        <property name="key" value="100283919" />
        <property name="secret" value="a645e522c99369c2fbcc191ae56ef14f" />
        <property name="scope" value="get_user_info,get_info,add_t,get_fanslist,add_share" />
    </bean>

    <bean id="renren" class="net.zhanqi.app.cas.open.provider.RenrenProvider">
        <property name="key" value="9fa46535c2e9432f9879996bbde43a59" />
        <property name="secret" value="3679c04aa2504228bcee7e0714f6a61d" />
        <property name="scope" value="read_user_blog,publish_share,publish_blog,send_message" />
    </bean>

    <bean id="oauthConfig" class="org.jasig.cas.support.oauth.OAuthConfiguration">
        <property name="loginUrl" value="${cas.securityContext.casProcessingFilterEntryPoint.loginUrl}" />
        <property name="providers">
            <list>
                <ref bean="sinaweibo" />
                <ref bean="github" />
                <ref bean="qzone" />
                <ref bean="renren" />
            </list>
        </property>
    </bean>
</beans>